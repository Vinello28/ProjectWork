@page "/prescriptpage"

@using CliMg.Data.Models
@using CliMg.Data.Services
@using Microsoft.AspNetCore.Components.Forms

@inject PrescriptionService prescriptionService
@inject NavigationManager NavigationManager


<PageTitle>Prescriptions</PageTitle>

<h1>Prescription module</h1>
<br />


@if (showForm){

    @if(Patients!=null){
        <h2>Select a patient</h2>
        <select @bind="selectedPatientId">
            @foreach (var patient in Patients)
            {
                <option value="@patient.PatientId">@($"{patient.Name} {patient.Surname}")</option>
            }
        </select>
    }else{
        <div align="center">
            <div class="spinner-border text-primary" role="status"></div>
        </div>
    }

    @if(selectedPatient!=null && selectedPatientId!=0) {
            
        <EditForm Model="@prescription" OnValidSubmit="@AddPrescription">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="drug">Drug:</label>
            <InputText id="drug" class="form-control" @bind-Value="@prescription.Drug" />
            <ValidationMessage For="@(() =>prescription.Drug)" />
        </div>

        <div class="form-group">
            <label for="dosage">Dosage(mg):</label>
            <InputNumber id="dosage" class="form-control" @bind-Value="@prescription.Dosage" />
            <ValidationMessage For="@(() => prescription.Dosage)" />
        </div>

        <div class="form-group">
            <label for="frequency">Frequency:</label>
            <InputText id="frequency" class="form-control" @bind-Value="@prescription.Frequency" />
            <ValidationMessage For="@(() => prescription.Frequency)" />
        </div>

        <div class="form-group">
            <label for="duration">Duration(days):</label>
            <InputDate id="duration" class="form-control" @bind-Value="@prescription.Duration" />
            <ValidationMessage For="@(() => prescription.Duration)" />
        </div>

        <div class="form-group">
            <label for="notes">Notes:</label>
            <InputText id="notes" class="form-control" @bind-Value="@prescription.Notes" />
            <ValidationMessage For="@(() => prescription.Notes)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Add Prescription</button>
        <button type="button" class="btn btn-secondary" @onclick="ToggleForm">Cancel</button>
        </EditForm>
    }
}
else
{
    <br />
    <button class="oi oi-people" style="background-color:transparent;border:none; width:150px" @onclick="ToggleForm">Add Prescription</button>
    <br />
    <br />
    
}


    @if (Prescriptions == null)
    {
        <br />
        <br />
        <div align="center">
            <div class="spinner-border text-primary" role="status"></div>
        </div>
        <br />

        @if(true){
            <div align="center">Something goes wrong:(</div>
        }
       
    }
    else if (Prescriptions != null && !showForm)
    {
    <table align="center" class="table table-striped table-hover table-responsive table-responsive-sm">
        <thead class="table-primary">
                <tr class="row">
                <th class="col-sm">Patient</th>
                <th class="col-sm">Drug</th>
                <th class="col-sm">Dosage</th>
                <th class="col-sm">Freq</th>
                <th class="col-sm">Duration</th>
                <th class="col-sm">Notes</th>
                <th class="col-sm">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var prescription in Prescriptions)
                {
                    <tr class="row">
                    <td class="col-sm">@prescription.PatientId</td>
                    <td class="col-sm">@prescription.Drug</td>
                    <td class="col-sm">@prescription.Dosage</td>
                    <td class="col-sm">@prescription.Frequency</td>
                    <td class="col-sm">@prescription.Duration.ToShortDateString()</td>
                    <td class="col-sm">@prescription.Notes</td>
                    <td class="col-sm">
                        <button class="oi oi-pencil" style="background-color:transparent;border:none" @onclick="() => EditPrescription(prescription)">Edit</button>
                        <button class="oi oi-trash" style="background-color:transparent;border:none;color:darkred" @onclick="() => DeletePrescription(prescription)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (showEditForm && SelectedPrescription!=null)
        {
            <h2>Edit Prescription</h2>

            <EditForm Model="@SelectedPrescription" OnValidSubmit="@SubmitEditPrescription">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="drug">Drug:</label>
                <InputText id="drug" class="form-control" @bind-Value="@SelectedPrescription.Drug" />
                <ValidationMessage For="@(() =>SelectedPrescription.Drug)" />
            </div>

            <div class="form-group">
                <label for="dosage">Dosage(mg):</label>
                <InputNumber id="dosage" class="form-control" @bind-Value="@SelectedPrescription.Dosage" />
                <ValidationMessage For="@(() => SelectedPrescription.Dosage)" />
            </div>

            <div class="form-group">
                <label for="frequency">Frequency:</label>
                <InputText id="frequency" class="form-control" @bind-Value="@SelectedPrescription.Frequency" />
                <ValidationMessage For="@(() => SelectedPrescription.Frequency)" />
            </div>

            <div class="form-group">
                <label for="duration">Duration(days):</label>
                <InputDate id="duration" class="form-control" @bind-Value="@SelectedPrescription.Duration" />
                <ValidationMessage For="@(() => SelectedPrescription.Duration)" />
            </div>

            <div class="form-group">
                <label for="notes">Notes:</label>
                <InputText id="notes" class="form-control" @bind-Value="@SelectedPrescription.Notes" />
                <ValidationMessage For="@(() => SelectedPrescription.Notes)" />
            </div>
            <br />
            <button type="submit" class="btn btn-primary">Update prescription</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEditPrescription">Cancel</button>
        </EditForm>
        }
    }


@code {
    private List<Prescription> Prescriptions { get; set; }
    private Prescription SelectedPrescription { get; set; }

    private List<Patient> Patients { get; set; }

    private Patient selectedPatient =new Patient();

    private int selectedPatientId { get; set; }

    private Prescription prescription = new Prescription();

    private bool showForm = false;

    private bool showEditForm = false;

    protected override async Task OnInitializedAsync()
    {
        selectedPatientId = 0;
        Patients= await prescriptionService.GetPatientListAsync();
        Prescriptions = await prescriptionService.GetAllPrescriptionsAsync();
    }

    protected override void OnParametersSet()
    {

        if (selectedPatientId != 0)
        {
            selectedPatient = Patients.FirstOrDefault(p => p.PatientId == selectedPatientId);
            StateHasChanged();
        }
    }

    private async void AddPrescription()
    {
        showForm = false;
        prescription.PatientId = selectedPatientId;
        await prescriptionService.AddPrescriptionAsync(prescription);
        //Prescriptions = await prescriptionService.GetAllPrescriptionsAsync();
        //StateHasChanged();
        Refresh();
    }


    private void EditPrescription(Prescription p)
    {
        showForm = false;
        showEditForm = true;
        SelectedPrescription = p;
    }

    private async Task SubmitEditPrescription()
    {
        await prescriptionService.UpdatePrescriptionAsync(SelectedPrescription);
        SelectedPrescription=null;
        Refresh();
    }

    private void CancelEditPrescription()
    {
        SelectedPrescription = null;
        Refresh();

    }

    private async void DeletePrescription(Prescription pr)
    {
        await prescriptionService.DeletePrescriptionAsync(pr);
        Prescriptions.Remove(pr);
        //Prescriptions = await prescriptionService.GetAllPrescriptionsAsync();
        //StateHasChanged();
        Refresh();
    }

    private void ToggleForm()
    {
        selectedPatient=new Patient();
        showForm = !showForm;
    }


    private async Task Refresh()
    {
        showForm = false;
        showEditForm = false;
        selectedPatient=null;
        selectedPatientId = 0;
        prescription=new Prescription();
        Patients= await prescriptionService.GetPatientListAsync();
        Prescriptions = await prescriptionService.GetAllPrescriptionsAsync();
        StateHasChanged();
    }

}
