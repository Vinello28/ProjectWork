

@page "/patientpage"

@using CliMg.Data.Models
@using CliMg.Data.Services
@using Microsoft.AspNetCore.Components.Forms

@inject PatientService PatientService
@inject NavigationManager NavigationManager


<PageTitle>Patient</PageTitle>

<h1>Patients</h1>
<br />


@if (showForm)
{
    <EditForm Model="@patient" OnValidSubmit="@AddPatient">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Nome:</label>
            <InputText id="name" class="form-control" @bind-Value="@patient.Name" />
            <ValidationMessage For="@(() => patient.Name)" />
        </div>
        <div class="form-group">
            <label for="surname">Cognome:</label>
            <InputText id="surname" class="form-control" @bind-Value="@patient.Surname" />
            <ValidationMessage For="@(() => patient.Surname)" />
                </div>
        <div class="form-group">
        <label for="dateofbirth">Data di Nascita:</label>
            <InputDate id="dateofbirth" class="form-control" @bind-Value="@patient.DateOfBirth" />
            <ValidationMessage For="@(() => patient.DateOfBirth)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Add patient</button>
        <button type="button" class="btn btn-secondary" @onclick="ToggleForm">Cancel</button>
    </EditForm>
}
else
{
    <button class="oi oi-people" style="border:none;background-color:transparent;width:150px" @onclick="ToggleForm">Add Patient</button>
    <br />
    <br />
     
}



@if(Patients== null)
{
    @Task.Delay(2000);
    <br />
    <br />
    <div align="center" class="spinner-border text-primary" role="status">
    </div>
}
else if(showForm==false)
{
    <center>
    <table align="center" class="table table-striped table-hover table-responsive table-responsive-sm">
        <thead class="table-primary">
            <tr class="row">
                <th class="col-sm-2">Name</th>
                <th class="col-sm-2">Surname</th>
                <th class="col-sm-2">Date of Birth</th>
                <th class="col-sm-2">Age</th>
                <th class="col-sm-2">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var patient in Patients)
            {
                <tr class="row">
                    <td class="col-sm-2">@patient.Name</td>
                    <td class="col-sm-2">@patient.Surname</td>
                    <td class="col-sm-2">@patient.DateOfBirth.ToShortDateString()</td>
                    <td class="col-sm-2">@patient.Age()</td>
                    <td class="col-sm-2">
                        <button class="btn btn-secondary" @onclick="() => EditPatient(patient)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeletePatient(patient)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    </center>

    @if (SelectedPatient != null && showForm==false)
    {
        <h2>Edit Patient</h2>

        <EditForm Model="@SelectedPatient" OnValidSubmit="@SubmitEditPatient">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Nome:</label>
                <InputText id="name" class="form-control" @bind-Value="@SelectedPatient.Name" />
                <ValidationMessage For="@(() => SelectedPatient.Name)" />
            </div>
            <div class="form-group">
                <label for="surname">Cognome:</label>
                <InputText id="surname" class="form-control" @bind-Value="@SelectedPatient.Surname" />
                <ValidationMessage For="@(() => SelectedPatient.Surname)" />
            </div>
            <div class="form-group">
                <label for="dateofbirth">Data di Nascita:</label>
                <InputDate id="dateofbirth" class="form-control" @bind-Value="@SelectedPatient.DateOfBirth" />
                <ValidationMessage For="@(() => SelectedPatient.DateOfBirth)" />
            </div>
            <br />
            <button type="submit" class="btn btn-primary">Update patient</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEditPatient">Cancel</button>
        </EditForm>
    }
}

@code {
    private List<Patient> Patients { get; set; }
    private Patient SelectedPatient { get; set; }

    private Patient patient = new Patient();

    private bool showForm = false;

    protected override async Task OnInitializedAsync()
    {
        Patients = await PatientService.GetAllPatientsAsync();
    }

    private async void AddPatient()
    {
        showForm = false;
        await PatientService.AddPatientAsync(patient);
        Refresh();
    }


    private void EditPatient(Patient patient)
    {
        SelectedPatient = patient;
    }

    private async Task SubmitEditPatient()
    {
        await PatientService.UpdatePatientAsync(SelectedPatient);
        SelectedPatient = null;
        Refresh();
    }

    private void CancelEditPatient()
    {
        SelectedPatient = null;
        Refresh();

    }

    private async void DeletePatient(Patient patient)
    {
        await PatientService.DeletePatientAsync(patient);
        Patients.Remove(patient);
        Refresh();
    }

    private void ToggleForm()
    {
        showForm = !showForm;
    }


    private async Task Refresh()
    {
        showForm = false;
        patient = new Patient();
        Patients = await PatientService.GetAllPatientsAsync();
        StateHasChanged();
    }

}
